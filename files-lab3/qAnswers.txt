--- Assignment 1 ---
• Test pressing BTN3 and BTN2 at the same time. What happens? Why?
- All inputs change att the same time since the if statements are not mutually exclusive.


• Three device-registers for input/output control are TRISE, TRISESET, and TRISECLR.
Their functions are related. How? What are the differences?
- TRISE is the register for controlling the direction of the pins on Port E. TRISESET and TRISECLR are used to set and clear the bits of the TRISE register.


• In the generated assembly code, in which MIPS register will the return values from
functions getbtns and getsw be placed in. You should be able to answer this question
without debugging the generated assembly code.
- The return values will be placed in register v0. Why? 
Because the return value is a 32-bit integer, 
and the MIPS calling convention states that the return value
 of a function should be placed in register v0.


• In this exercise, we explained which bits that should be used in Port D and Port E. How can
you find this information in the PIC32 and ChipKIT manuals? Be prepared to demonstrate
how to find this information in the manuals.
Advice: check the lecture slides from lecture 5 for ideas.
- The information can be found in the "PIC32 Family Reference Manual" and the "PIC32MX3XX/4XX Family Data Sheet".
The information can be found by searching for the specific register names, such as "TRISE" and "PORTE".







--- Assignment 2 ---

When the time-out event-flag is a "1", how does your code reset it to "0"?
• What would happen if the time-out event-flag was not reset to "0" by your code? Why?
- The code resets the time-out event-flag to "0" by using the IFSCLR(0) = 0x100; instruction. 
If the time-out event-flag was not reset to "0" by the code, 
the code would not be able to detect the next time-out event, 
as the flag would still be set to "1" and the code would not enter the if-statement that checks for the time-out event-flag.
Why is IFSCLR(0) set to 0x100 and not any other value?
The IFSCLR(0) is set to 0x100 because the time-out event-flag is located at bit 8 of the IFS(0) register. 
The IFSCLR(0) = 0x100 instruction clears the time-out event-flag by setting bit 8 of the IFS(0) register to "0".



• Which device-register (or registers) must be written to define the time between time-out
events? Describe the function of that register (or of those registers).
- The PR2 register must be written to define the time between time-out events.
Because the PR2 register is the period register for Timer 2,
writing to it sets the time between time-out events.


• If you press BTN3 quickly, does the time update reliably? Why, or why not? If not, would
that be easy to change? If so, how?
- If you press BTN3 quickly, the time does not update reliably.
This is because the code only updates the time every 10 time-out events (1 second).
To make the time update reliably when BTN3 is pressed quickly,
the code could be changed to update the time every time the BTN3 is pressed.
For example one could call time2string, display_string and display_update
each time a button is called.







--- Assignment 3 ---
• When the time-out event-flag is a "1", how does your code reset it to "0"?
- The time-out event-flag is reset to "0" by clearing the Timer 2 interrupt flag in the user_isr function. 
  This is done by writing a "1" to the IFS(0) register at bit position 8. 
  This is done by the line of code IFSCLR(0) = 0x100; in the user_isr function.


• What would happen if the time-out event-flag was not reset to "0" by your code? Why?
- If the time-out event-flag was not reset to "0" by your code, the interrupt service routine user_isr 
would be continuously called. This is because the interrupt controller would think that the interrupt 
condition (in this case, a timer timeout) is still present as long as the interrupt flag is set. 
This could lead to your program getting stuck in the interrupt service routine, preventing it from 
executing other tasks.


• From which part of the code is the function user_isr called? Why is it called from there?
- The function user_isr is an Interrupt Service Routine (ISR). It is not explicitly called from any part of the code you provided. Instead, it is invoked automatically by the hardware when a specific event, known as an interrupt, occurs.

In this case, the user_isr function is associated with the Timer 2 interrupt. 
When Timer 2 reaches the value specified in the PR2 register (31250 in this case), 
it generates an interrupt. The hardware then automatically invokes the user_isr function 
to handle this interrupt.


• Why are registers saved before the call to user_isr? Why are only some registers saved?
- The registers are saved before the call to user_isr to ensure that the state of the processor is preserved.
  Only some registers are saved because the user_isr function does not use all the registers.


• Which device-register (or registers), and which processor-register (or registers) must be
written to enable interrupts from the timer? Describe the functions of the relevant registers
- To enable interrupts from the timer, you must write to the IEC(0) register. 
  This register is used to enable specific interrupts. 
  In this case, you must write a "1" to bit position 8 of the IEC(0) register to enable the Timer 2 interrupt. 
  This is done by the line of code IECSET(0) = 0x100; in the labinit function.

  The INTCONSET register is used to enable global interrupts. 
  This register has a bit called MVEC (bit 12) that must be set to "1" to enable multi-vector mode. 
  This is done by the line of code INTCONSET = INTCON_MVEC_MASK; in the labinit function.

  The functions of the relevant registers are as follows:
  - IEC(0): This register is used to enable specific interrupts. 
    Writing a "1" to a specific bit position enables the corresponding interrupt.
  - INTCONSET: This register is used to enable global interrupts.
    Writing a "1" to a specific bit position enables the corresponding interrupt.
  - INTCON_MVEC_MASK: This is a bit mask for the MVEC bit in the INTCON register.
    It is used to enable multi-vector mode.